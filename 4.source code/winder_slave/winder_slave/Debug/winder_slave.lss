
winder_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023a  00800060  00000768  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080029a  0080029a  00000a36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001820  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  00002ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fd  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  8a:	0c 94 b2 03 	jmp	0x764	; 0x764 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Init>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f 74       	andi	r24, 0x4F	; 79
  96:	87 bb       	out	0x17, r24	; 23
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8d b9       	out	0x0d, r24	; 13
  a2:	08 95       	ret

000000a4 <SPI_Receive>:
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <SPI_Receive>
  a8:	8f b1       	in	r24, 0x0f	; 15
  aa:	08 95       	ret

000000ac <get_value>:
  ac:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Init>
  b0:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Receive>
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <LCD_Command>:
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x1c>
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	8f e6       	ldi	r24, 0x6F	; 111
  dc:	97 e1       	ldi	r25, 0x17	; 23
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x26>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x2c>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <LCD_Char>:
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Char+0x16>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Char+0x1c>
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Char+0x26>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_Char+0x2c>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <LCD_Init>:
 118:	8a b3       	in	r24, 0x1a	; 26
 11a:	80 6e       	ori	r24, 0xE0	; 224
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	81 bb       	out	0x11, r24	; 17
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9c e9       	ldi	r25, 0x9C	; 156
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Init+0xe>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Init+0x14>
 12c:	00 00       	nop
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 14c:	08 95       	ret

0000014e <LCD_String>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	8c 01       	movw	r16, r24
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
 15c:	03 c0       	rjmp	.+6      	; 0x164 <LCD_String+0x16>
 15e:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
 162:	21 96       	adiw	r28, 0x01	; 1
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	fd 1f       	adc	r31, r29
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <LCD_String+0x10>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 186:	08 95       	ret

00000188 <key_enter_receive>:
	char key1='0';
	
	while(1)
	{
		
		SPI_Init();
 188:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Init>
		key1=SPI_Receive();
 18c:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Receive>
		if(key1=='#')
 190:	83 32       	cpi	r24, 0x23	; 35
 192:	d1 f7       	brne	.-12     	; 0x188 <key_enter_receive>
		{
			
			LCD_Clear();
 194:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	84 e3       	ldi	r24, 0x34	; 52
 19c:	9c e0       	ldi	r25, 0x0C	; 12
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <key_enter_receive+0x16>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <key_enter_receive+0x20>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <key_receive>:
{
	char value;
	while(1)
	{
		
		SPI_Init();
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Init>
		value = SPI_Receive();//Receiveing the pressed key from master
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Receive>
		if(value=='#')
 1b4:	83 32       	cpi	r24, 0x23	; 35
 1b6:	61 f4       	brne	.+24     	; 0x1d0 <key_receive+0x24>
		{
			
			LCD_Clear();
 1b8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Clear>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	84 e3       	ldi	r24, 0x34	; 52
 1c0:	9c e0       	ldi	r25, 0x0C	; 12
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <key_receive+0x16>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <key_receive+0x20>
 1cc:	00 00       	nop
		{
			LCD_Char(value);//printing pressed key in LCD
		}
	}
	
}
 1ce:	08 95       	ret
			_delay_ms(500);
			break;
		}
		else
		{
			LCD_Char(value);//printing pressed key in LCD
 1d0:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
		}
	}
 1d4:	eb cf       	rjmp	.-42     	; 0x1ac <key_receive>

000001d6 <main>:
	
}


int main(void)
{
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	2e 97       	sbiw	r28, 0x0e	; 14
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	
	
	
	
	
 1fa:	cd b6       	in	r12, 0x3d	; 61
 1fc:	de b6       	in	r13, 0x3e	; 62

int main(void)
{
	
	
	LCD_Init();
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Init>
	

	LCD_String("    Welcome");
 202:	8c e1       	ldi	r24, 0x1C	; 28
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0xC0); //setting cursor to second line
 20a:	80 ec       	ldi	r24, 0xC0	; 192
 20c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	32 e5       	ldi	r19, 0x52	; 82
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	21 50       	subi	r18, 0x01	; 1
 218:	30 40       	sbci	r19, 0x00	; 0
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x40>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x4a>
 220:	00 00       	nop
	_delay_ms(300);
	LCD_String("   The Winder");
 222:	88 e2       	ldi	r24, 0x28	; 40
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 22a:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	//LCD_Clear();

	LCD_String("Enter primary vo");
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0xC0);
 236:	80 ec       	ldi	r24, 0xC0	; 192
 238:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("ltage :");
 23c:	87 e4       	ldi	r24, 0x47	; 71
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0x0F);
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	key_receive();
 24a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
	
	LCD_String("Enter primary fr");
 24e:	8f e4       	ldi	r24, 0x4F	; 79
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0xC0);
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("equency :");
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 264:	9f ef       	ldi	r25, 0xFF	; 255
 266:	a2 e5       	ldi	r26, 0x52	; 82
 268:	b7 e0       	ldi	r27, 0x07	; 7
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	a0 40       	sbci	r26, 0x00	; 0
 26e:	b0 40       	sbci	r27, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x94>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x9e>
 274:	00 00       	nop
	_delay_ms(300);
	LCD_Command(0x0F);
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	key_receive();
 27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
	
	LCD_String("Enter NO of ");
 280:	8a e6       	ldi	r24, 0x6A	; 106
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0xC0);
 288:	80 ec       	ldi	r24, 0xC0	; 192
 28a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("ampearages:");
 28e:	87 e7       	ldi	r24, 0x77	; 119
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	32 e5       	ldi	r19, 0x52	; 82
 29a:	87 e0       	ldi	r24, 0x07	; 7
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xc6>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xd0>
 2a6:	00 00       	nop
	_delay_ms(300);
	LCD_Command(0x0F);
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	key_receive();
 2ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
	
	ACT=get_value();
 2b2:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 2b6:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <ACT+0x1>
 2ba:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ACT>
	int num_vol_voltages[ACT]; //Number of voltages per ampearage in secondary coil
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	ad b7       	in	r26, 0x3d	; 61
 2c4:	be b7       	in	r27, 0x3e	; 62
 2c6:	a8 1b       	sub	r26, r24
 2c8:	b9 0b       	sbc	r27, r25
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	be bf       	out	0x3e, r27	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	ad bf       	out	0x3d, r26	; 61
 2d4:	2d b7       	in	r18, 0x3d	; 61
 2d6:	3e b7       	in	r19, 0x3e	; 62
 2d8:	2f 5f       	subi	r18, 0xFF	; 255
 2da:	3f 4f       	sbci	r19, 0xFF	; 255
 2dc:	79 01       	movw	r14, r18
	
	LCD_String("Enter NO of ");
 2de:	8a e6       	ldi	r24, 0x6A	; 106
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0xC0);
 2e6:	80 ec       	ldi	r24, 0xC0	; 192
 2e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("total volts:");
 2ec:	83 e8       	ldi	r24, 0x83	; 131
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 2f4:	3f ef       	ldi	r19, 0xFF	; 255
 2f6:	82 e5       	ldi	r24, 0x52	; 82
 2f8:	97 e0       	ldi	r25, 0x07	; 7
 2fa:	31 50       	subi	r19, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x124>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x12e>
 304:	00 00       	nop
	_delay_ms(300);
	LCD_Command(0x0F);
 306:	8f e0       	ldi	r24, 0x0F	; 15
 308:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	key_receive();
 30c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
	
	for(int i=0;i<ACT;i++)
 310:	a1 2c       	mov	r10, r1
 312:	b1 2c       	mov	r11, r1
 314:	67 c0       	rjmp	.+206    	; 0x3e4 <main+0x20e>
	{
		LCD_String("Enter ampearage");
 316:	80 e9       	ldi	r24, 0x90	; 144
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0xC0);
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("(mA):");
 324:	80 ea       	ldi	r24, 0xA0	; 160
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 32c:	af ef       	ldi	r26, 0xFF	; 255
 32e:	b2 e5       	ldi	r27, 0x52	; 82
 330:	27 e0       	ldi	r18, 0x07	; 7
 332:	a1 50       	subi	r26, 0x01	; 1
 334:	b0 40       	sbci	r27, 0x00	; 0
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x15c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x166>
 33c:	00 00       	nop
		_delay_ms(300);
		LCD_Command(0x0F);
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		key_receive();
 344:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
		

		LCD_String("Enter no of");
 348:	86 ea       	ldi	r24, 0xA6	; 166
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0xC0);
 350:	80 ec       	ldi	r24, 0xC0	; 192
 352:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("volts:");
 356:	89 e8       	ldi	r24, 0x89	; 137
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 35e:	3f ef       	ldi	r19, 0xFF	; 255
 360:	82 e5       	ldi	r24, 0x52	; 82
 362:	97 e0       	ldi	r25, 0x07	; 7
 364:	31 50       	subi	r19, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x18e>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x198>
 36e:	00 00       	nop
		_delay_ms(300);
		LCD_Command(0x0F);
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		key_receive();
 376:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
		
		VCT=get_value();
 37a:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 37e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <VCT+0x1>
 382:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <VCT>
		
		
		num_vol_voltages[i]=VCT;
 386:	f5 01       	movw	r30, r10
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ee 0d       	add	r30, r14
 38e:	ff 1d       	adc	r31, r15
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	80 83       	st	Z, r24
		
		for(int j=0;j<VCT;j++)
 394:	00 e0       	ldi	r16, 0x00	; 0
 396:	10 e0       	ldi	r17, 0x00	; 0
 398:	1b c0       	rjmp	.+54     	; 0x3d0 <main+0x1fa>
		{
			
			LCD_String("Enter voltage");
 39a:	82 eb       	ldi	r24, 0xB2	; 178
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
			LCD_Command(0xC0);
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
			LCD_String(":");
 3a8:	8d e4       	ldi	r24, 0x4D	; 77
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
 3b0:	af ef       	ldi	r26, 0xFF	; 255
 3b2:	b2 e5       	ldi	r27, 0x52	; 82
 3b4:	27 e0       	ldi	r18, 0x07	; 7
 3b6:	a1 50       	subi	r26, 0x01	; 1
 3b8:	b0 40       	sbci	r27, 0x00	; 0
 3ba:	20 40       	sbci	r18, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x1e0>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x1ea>
 3c0:	00 00       	nop
			_delay_ms(300);
			LCD_Command(0x0F);
 3c2:	8f e0       	ldi	r24, 0x0F	; 15
 3c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
			key_receive();
 3c8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <key_receive>
		VCT=get_value();
		
		
		num_vol_voltages[i]=VCT;
		
		for(int j=0;j<VCT;j++)
 3cc:	0f 5f       	subi	r16, 0xFF	; 255
 3ce:	1f 4f       	sbci	r17, 0xFF	; 255
 3d0:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <VCT>
 3d4:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <VCT+0x1>
 3d8:	08 17       	cp	r16, r24
 3da:	19 07       	cpc	r17, r25
 3dc:	f4 f2       	brlt	.-68     	; 0x39a <main+0x1c4>
	LCD_String("total volts:");
	_delay_ms(300);
	LCD_Command(0x0F);
	key_receive();
	
	for(int i=0;i<ACT;i++)
 3de:	3f ef       	ldi	r19, 0xFF	; 255
 3e0:	a3 1a       	sub	r10, r19
 3e2:	b3 0a       	sbc	r11, r19
 3e4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ACT>
 3e8:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <ACT+0x1>
 3ec:	a8 16       	cp	r10, r24
 3ee:	b9 06       	cpc	r11, r25
 3f0:	0c f4       	brge	.+2      	; 0x3f4 <main+0x21e>
 3f2:	91 cf       	rjmp	.-222    	; 0x316 <main+0x140>
	}
	
	//printing values for user
	
	//printing primary SWGA
	LCD_String("PRI SWGA:");
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	P_SWGA=get_value();
 3fc:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 400:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <P_SWGA+0x1>
 404:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <P_SWGA>
	char out_str[7]="0";
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	3a 83       	std	Y+2, r19	; 0x02
 40e:	29 83       	std	Y+1, r18	; 0x01
 410:	fe 01       	movw	r30, r28
 412:	33 96       	adiw	r30, 0x03	; 3
 414:	25 e0       	ldi	r18, 0x05	; 5
 416:	df 01       	movw	r26, r30
 418:	1d 92       	st	X+, r1
 41a:	2a 95       	dec	r18
 41c:	e9 f7       	brne	.-6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	itoa(RAM_SWGA[P_SWGA],out_str,10);
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	fc 01       	movw	r30, r24
 424:	e8 52       	subi	r30, 0x28	; 40
 426:	ff 4f       	sbci	r31, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 428:	4a e0       	ldi	r20, 0x0A	; 10
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__itoa_ncheck>
	LCD_Command(0xC0);
 438:	80 ec       	ldi	r24, 0xC0	; 192
 43a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String(out_str);
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 446:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	//int t=0;
	//printing secondary SWGA
	for(int i=0;i<ACT;i++)
 44a:	00 e0       	ldi	r16, 0x00	; 0
 44c:	10 e0       	ldi	r17, 0x00	; 0
 44e:	3f c0       	rjmp	.+126    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
	{
		LCD_Command(0X80);
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("SEC SWGA:");
 456:	8a ec       	ldi	r24, 0xCA	; 202
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0xC0);
 45e:	80 ec       	ldi	r24, 0xC0	; 192
 460:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		S_SWGA=get_value();
 464:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 468:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <S_SWGA+0x1>
 46c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <S_SWGA>
 470:	bf ef       	ldi	r27, 0xFF	; 255
 472:	29 e6       	ldi	r18, 0x69	; 105
 474:	38 e1       	ldi	r19, 0x18	; 24
 476:	b1 50       	subi	r27, 0x01	; 1
 478:	20 40       	sbci	r18, 0x00	; 0
 47a:	30 40       	sbci	r19, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
		_delay_ms(1000);
		char out_str3[7]="0";
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	99 87       	std	Y+9, r25	; 0x09
 488:	88 87       	std	Y+8, r24	; 0x08
 48a:	fe 01       	movw	r30, r28
 48c:	3a 96       	adiw	r30, 0x0a	; 10
 48e:	85 e0       	ldi	r24, 0x05	; 5
 490:	df 01       	movw	r26, r30
 492:	1d 92       	st	X+, r1
 494:	8a 95       	dec	r24
 496:	e9 f7       	brne	.-6      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	be 01       	movw	r22, r28
 49c:	68 5f       	subi	r22, 0xF8	; 248
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <S_SWGA>
 4a4:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <S_SWGA+0x1>
 4a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__itoa_ncheck>
		itoa(S_SWGA,out_str3,10);
		LCD_String(out_str3);
 4ac:	ce 01       	movw	r24, r28
 4ae:	08 96       	adiw	r24, 0x08	; 8
 4b0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		key_enter_receive();
 4b4:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
 4b8:	bf ef       	ldi	r27, 0xFF	; 255
 4ba:	24 e3       	ldi	r18, 0x34	; 52
 4bc:	3c e0       	ldi	r19, 0x0C	; 12
 4be:	b1 50       	subi	r27, 0x01	; 1
 4c0:	20 40       	sbci	r18, 0x00	; 0
 4c2:	30 40       	sbci	r19, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c8:	00 00       	nop
	key_enter_receive();
	
	
	//int t=0;
	//printing secondary SWGA
	for(int i=0;i<ACT;i++)
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ACT>
 4d2:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <ACT+0x1>
 4d6:	08 17       	cp	r16, r24
 4d8:	19 07       	cpc	r17, r25
 4da:	0c f4       	brge	.+2      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4dc:	b9 cf       	rjmp	.-142    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	}
	
	
	
	//printing core area
	LCD_Command(0X80);
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("core area:");
 4e4:	84 ed       	ldi	r24, 0xD4	; 212
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	C_AR=get_value();
 4ec:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 4f0:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <C_AR+0x1>
 4f4:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <C_AR>
	out_str[7]="0";
 4f8:	2f ed       	ldi	r18, 0xDF	; 223
 4fa:	31 e0       	ldi	r19, 0x01	; 1
 4fc:	28 87       	std	Y+8, r18	; 0x08
 4fe:	4a e0       	ldi	r20, 0x0A	; 10
 500:	be 01       	movw	r22, r28
 502:	6f 5f       	subi	r22, 0xFF	; 255
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__itoa_ncheck>
	itoa(C_AR,out_str,10);
	LCD_Command(0xC0);
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String(out_str);
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 518:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	//printing ei lamination
	LCD_Command(0X80);
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("EI LAMINATION:");
 522:	81 ee       	ldi	r24, 0xE1	; 225
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	EI_LA=get_value();
 52a:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 52e:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <__data_end+0x1>
 532:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
	LCD_Command(0xC0);
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String(RAM_EILAM[EI_LA]);
 53c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
 540:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <__data_end+0x1>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	80 5a       	subi	r24, 0xA0	; 160
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 554:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	//Bobbing measuring unit
	LCD_Command(0X80);
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("Place the Bobbin");
 55e:	80 ef       	ldi	r24, 0xF0	; 240
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 566:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	
	LCD_Command(0X0C);
 56a:	8c e0       	ldi	r24, 0x0C	; 12
 56c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_Command(0X80);
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("Rotate Bobbin");
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 57e:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	//z length measuring
	LCD_Command(0X80);
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("adjust bobbin");
 588:	8f e0       	ldi	r24, 0x0F	; 15
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 590:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	Bob_result=get_value();
 594:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 598:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <Bob_result+0x1>
 59c:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <Bob_result>
	if(Bob_result==1)
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	89 f4       	brne	.+34     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
	{
		LCD_Command(0X80);
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("Bobbin is suitable");
 5aa:	8d e1       	ldi	r24, 0x1D	; 29
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0XC0);
 5b2:	80 ec       	ldi	r24, 0xC0	; 192
 5b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("le");
 5b8:	8d e2       	ldi	r24, 0x2D	; 45
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		key_enter_receive();
 5c0:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
 5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
	}
	else
	{
		LCD_Command(0X80);
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("Bobbin isnot sui");
 5cc:	80 e3       	ldi	r24, 0x30	; 48
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0XC0);
 5d4:	80 ec       	ldi	r24, 0xC0	; 192
 5d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("table");
 5da:	8a e2       	ldi	r24, 0x2A	; 42
 5dc:	92 e0       	ldi	r25, 0x02	; 2
 5de:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		key_enter_receive();
 5e2:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	}
	
	LCD_Command(0X80);
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("Bobbin measuring");
 5ec:	81 e4       	ldi	r24, 0x41	; 65
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0XC0);
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("completed");
 5fa:	82 e5       	ldi	r24, 0x52	; 82
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 602:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	

	//starting the winding
	LCD_Command(0X80);
 606:	80 e8       	ldi	r24, 0x80	; 128
 608:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("Press # to start");
 60c:	8c e5       	ldi	r24, 0x5C	; 92
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	LCD_Command(0XC0);
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
	LCD_String("winding!");
 61a:	8d e6       	ldi	r24, 0x6D	; 109
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
	key_enter_receive();
 622:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	
	
	for(int i=0;i<ACT;i++)
 626:	00 e0       	ldi	r16, 0x00	; 0
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	47 c0       	rjmp	.+142    	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
	{
	int len=num_vol_voltages[i];
 62c:	f8 01       	movw	r30, r16
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	ee 0d       	add	r30, r14
 634:	ff 1d       	adc	r31, r15
 636:	80 81       	ld	r24, Z
 638:	91 81       	ldd	r25, Z+1	; 0x01
	if(len>1)
 63a:	02 97       	sbiw	r24, 0x02	; 2
 63c:	34 f1       	brlt	.+76     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
	{
	
		win_result=get_value();
 63e:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 642:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <win_result+0x1>
 646:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <win_result>
		if(win_result==10)
 64a:	8a 30       	cpi	r24, 0x0A	; 10
 64c:	91 05       	cpc	r25, r1
 64e:	51 f4       	brne	.+20     	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
		{
			LCD_Command(0X80);
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
			LCD_String("Insert next coil");
 656:	86 e7       	ldi	r24, 0x76	; 118
 658:	92 e0       	ldi	r25, 0x02	; 2
 65a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
			key_enter_receive();
 65e:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
 662:	29 c0       	rjmp	.+82     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		}
		else if(win_result==30)
 664:	4e 97       	sbiw	r24, 0x1e	; 30
 666:	39 f5       	brne	.+78     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		{
			LCD_Command(0X80);
 668:	80 e8       	ldi	r24, 0x80	; 128
 66a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
			LCD_String("Winding");
 66e:	87 e8       	ldi	r24, 0x87	; 135
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
			LCD_Command(0XC0);
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
			LCD_String("completed!");
 67c:	8f e8       	ldi	r24, 0x8F	; 143
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
			key_enter_receive();
 684:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
 688:	16 c0       	rjmp	.+44     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		}
	}
	else
	{
		win_result=get_value();
 68a:	0e 94 56 00 	call	0xac	; 0xac <get_value>
 68e:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <win_result+0x1>
 692:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <win_result>
		LCD_Command(0X80);
 696:	80 e8       	ldi	r24, 0x80	; 128
 698:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("Winding");
 69c:	87 e8       	ldi	r24, 0x87	; 135
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		LCD_Command(0XC0);
 6a4:	80 ec       	ldi	r24, 0xC0	; 192
 6a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_Command>
		LCD_String("completed!");
 6aa:	8f e8       	ldi	r24, 0x8F	; 143
 6ac:	92 e0       	ldi	r25, 0x02	; 2
 6ae:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_String>
		key_enter_receive();
 6b2:	0e 94 c4 00 	call	0x188	; 0x188 <key_enter_receive>
	LCD_Command(0XC0);
	LCD_String("winding!");
	key_enter_receive();
	
	
	for(int i=0;i<ACT;i++)
 6b6:	0f 5f       	subi	r16, 0xFF	; 255
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ACT>
 6be:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <ACT+0x1>
 6c2:	08 17       	cp	r16, r24
 6c4:	19 07       	cpc	r17, r25
 6c6:	0c f4       	brge	.+2      	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6c8:	b1 cf       	rjmp	.-158    	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
	
	
	
	
	
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de be       	out	0x3e, r13	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd be       	out	0x3d, r12	; 61
 6d8:	2e 96       	adiw	r28, 0x0e	; 14
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	08 95       	ret

000006fa <__itoa_ncheck>:
 6fa:	bb 27       	eor	r27, r27
 6fc:	4a 30       	cpi	r20, 0x0A	; 10
 6fe:	31 f4       	brne	.+12     	; 0x70c <__itoa_ncheck+0x12>
 700:	99 23       	and	r25, r25
 702:	22 f4       	brpl	.+8      	; 0x70c <__itoa_ncheck+0x12>
 704:	bd e2       	ldi	r27, 0x2D	; 45
 706:	90 95       	com	r25
 708:	81 95       	neg	r24
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	0c 94 89 03 	jmp	0x712	; 0x712 <__utoa_common>

00000710 <__utoa_ncheck>:
 710:	bb 27       	eor	r27, r27

00000712 <__utoa_common>:
 712:	fb 01       	movw	r30, r22
 714:	55 27       	eor	r21, r21
 716:	aa 27       	eor	r26, r26
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	aa 1f       	adc	r26, r26
 71e:	a4 17       	cp	r26, r20
 720:	10 f0       	brcs	.+4      	; 0x726 <__utoa_common+0x14>
 722:	a4 1b       	sub	r26, r20
 724:	83 95       	inc	r24
 726:	50 51       	subi	r21, 0x10	; 16
 728:	b9 f7       	brne	.-18     	; 0x718 <__utoa_common+0x6>
 72a:	a0 5d       	subi	r26, 0xD0	; 208
 72c:	aa 33       	cpi	r26, 0x3A	; 58
 72e:	08 f0       	brcs	.+2      	; 0x732 <__utoa_common+0x20>
 730:	a9 5d       	subi	r26, 0xD9	; 217
 732:	a1 93       	st	Z+, r26
 734:	00 97       	sbiw	r24, 0x00	; 0
 736:	79 f7       	brne	.-34     	; 0x716 <__utoa_common+0x4>
 738:	b1 11       	cpse	r27, r1
 73a:	b1 93       	st	Z+, r27
 73c:	11 92       	st	Z+, r1
 73e:	cb 01       	movw	r24, r22
 740:	0c 94 a2 03 	jmp	0x744	; 0x744 <strrev>

00000744 <strrev>:
 744:	dc 01       	movw	r26, r24
 746:	fc 01       	movw	r30, r24
 748:	67 2f       	mov	r22, r23
 74a:	71 91       	ld	r23, Z+
 74c:	77 23       	and	r23, r23
 74e:	e1 f7       	brne	.-8      	; 0x748 <strrev+0x4>
 750:	32 97       	sbiw	r30, 0x02	; 2
 752:	04 c0       	rjmp	.+8      	; 0x75c <strrev+0x18>
 754:	7c 91       	ld	r23, X
 756:	6d 93       	st	X+, r22
 758:	70 83       	st	Z, r23
 75a:	62 91       	ld	r22, -Z
 75c:	ae 17       	cp	r26, r30
 75e:	bf 07       	cpc	r27, r31
 760:	c8 f3       	brcs	.-14     	; 0x754 <strrev+0x10>
 762:	08 95       	ret

00000764 <_exit>:
 764:	f8 94       	cli

00000766 <__stop_program>:
 766:	ff cf       	rjmp	.-2      	; 0x766 <__stop_program>
